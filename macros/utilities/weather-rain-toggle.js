/**
 * Weather Rain Toggle - Utility Macro
 *
 * Utilise FXMaster pour contr√¥ler les effets de pluie et brouillard sur la sc√®ne.
 * - Premier usage : Active la pluie + brouillard sur la sc√®ne
 * - Second usage : D√©sactive les effets si ils sont d√©j√† actifs
 *
 * Effets appliqu√©s :
 * - Particules de pluie (rain particle effect)
 * - Filtre de brouillard (fog filter effect)
 *
 * D√©pendances :
 * - FXMaster (module requis)
 *
 * Usage : Ex√©cuter la macro pour basculer l'√©tat de la pluie avec brouillard
 */

(async () => {
    // ===== CONFIGURATION DES EFFETS M√âT√âO =====
    const WEATHER_CONFIG = {
        // Configuration FXMaster pour les particules de pluie
        rainParticles: {
            type: "rain",
            options: {
                scale: 1,
                direction: 75,      // Direction l√©g√®rement inclin√©e
                speed: 1,
                lifetime: 1,
                density: 0.5,       // Pluie mod√©r√©e
                alpha: 1,
                tint: {
                    apply: false,
                    value: "#ffffff"
                }
            }
        },

        // Configuration FXMaster pour le filtre de brouillard
        fogFilter: {
            type: "fog",
            options: {
                dimensions: 1,
                speed: 1,
                density: 0.2,       // Brouillard l√©ger
                color: {
                    apply: false,
                    value: "#000000"
                }
            }
        },

        // Messages d'interface
        messages: {
            started: "üåßÔ∏è La pluie et le brouillard commencent...",
            stopped: "‚òÄÔ∏è La pluie et le brouillard s'arr√™tent.",
            noFxmaster: "‚ùå FXMaster n'est pas disponible ! Veuillez installer et activer le module FXMaster.",
            error: "‚ö†Ô∏è Erreur lors du contr√¥le m√©t√©orologique."
        }
    };

    // ===== VALIDATION DE FXMASTER =====

    /**
     * V√©rifie si FXMaster est disponible et actif
     */
    function isFXMasterAvailable() {
        return typeof FXMASTER !== 'undefined' &&
               FXMASTER.filters &&
               typeof Hooks !== 'undefined';
    }

    if (!isFXMasterAvailable()) {
        ui.notifications.error(WEATHER_CONFIG.messages.noFxmaster);
        console.error("[Weather Rain Toggle] FXMaster module not found or not active");
        return;
    }

    // ===== GESTION DE L'√âTAT M√âT√âOROLOGIQUE =====

    /**
     * V√©rifie si les effets m√©t√©o sont actuellement actifs
     * V√©rifie √† la fois nos flags personnalis√©s et les flags FXMaster
     */
    function isWeatherActive() {
        // V√©rifier notre flag personnalis√©
        const customFlag = canvas.scene.getFlag("world", "weatherRainToggleActive") || false;

        // V√©rifier les flags FXMaster pour plus de robustesse
        const fxmasterEffects = canvas.scene.getFlag("fxmaster", "effects") || {};
        const hasFXMasterEffects = Object.keys(fxmasterEffects).length > 0;

        console.log(`[Weather Rain Toggle] State check - Custom flag: ${customFlag}, FXMaster effects: ${hasFXMasterEffects}`);

        // Consid√©rer actif si l'un des deux est pr√©sent
        return customFlag || hasFXMasterEffects;
    }

    /**
     * Active les effets m√©t√©orologiques (pluie + brouillard)
     */
    async function startWeather() {
        try {
            console.log("[Weather Rain Toggle] Starting weather effects...");

            // 1. Activer les particules de pluie via Hook (m√©thode valid√©e)
            await Hooks.call('fxmaster.updateParticleEffects', [WEATHER_CONFIG.rainParticles]);
            console.log("[Weather Rain Toggle] Rain particles activated");

            // 2. Activer le filtre de brouillard via API directe (m√©thode valid√©e)
            await FXMASTER.filters.setFilters([WEATHER_CONFIG.fogFilter]);
            console.log("[Weather Rain Toggle] Fog filter activated");

            // 3. Marquer l'√©tat comme actif dans les flags de la sc√®ne
            await canvas.scene.setFlag("world", "weatherRainToggleActive", true);
            await canvas.scene.setFlag("world", "weatherRainToggleConfig", {
                rainConfig: WEATHER_CONFIG.rainParticles,
                fogConfig: WEATHER_CONFIG.fogFilter,
                activatedAt: Date.now()
            });

            ui.notifications.info(WEATHER_CONFIG.messages.started);
            console.log("[Weather Rain Toggle] Weather effects started successfully");
            return true;

        } catch (error) {
            console.error("[Weather Rain Toggle] Error starting weather:", error);
            ui.notifications.error(WEATHER_CONFIG.messages.error);
            return false;
        }
    }

    /**
     * D√©sactive les effets m√©t√©orologiques
     * Utilise les m√©thodes valid√©es pour FXMaster v6.0+ FoundryVTT v13
     */
    async function stopWeather() {
        try {
            console.log("[Weather Rain Toggle] Stopping weather effects...");

            // 1. Effacer les effets de particules FXMaster (‚úÖ m√©thode valid√©e)
            await canvas.scene.unsetFlag("fxmaster", "effects");
            console.log("[Weather Rain Toggle] Particle effects cleared via unsetFlag");

            // 2. Effacer les filtres FXMaster (‚úÖ m√©thode valid√©e)
            await FXMASTER.filters.setFilters([]);
            console.log("[Weather Rain Toggle] Filter effects cleared via API");

            // 3. Supprimer nos flags personnalis√©s
            await canvas.scene.unsetFlag("world", "weatherRainToggleActive");
            await canvas.scene.unsetFlag("world", "weatherRainToggleConfig");

            ui.notifications.info(WEATHER_CONFIG.messages.stopped);
            console.log("[Weather Rain Toggle] Weather effects stopped successfully");
            return true;

        } catch (error) {
            console.error("[Weather Rain Toggle] Error stopping weather:", error);
            ui.notifications.error(WEATHER_CONFIG.messages.error);
            return false;
        }
    }

    // ===== LOGIQUE PRINCIPALE DE BASCULEMENT =====

    /**
     * Bascule l'√©tat m√©t√©orologique (marche/arr√™t)
     */
    async function toggleWeather() {
        const weatherActive = isWeatherActive();

        console.log(`[Weather Rain Toggle] Current weather state: ${weatherActive ? 'ACTIVE' : 'INACTIVE'}`);

        if (weatherActive) {
            // Les effets m√©t√©o sont actifs, les arr√™ter
            return await stopWeather();
        } else {
            // Les effets m√©t√©o ne sont pas actifs, les d√©marrer
            return await startWeather();
        }
    }

    // ===== DIALOG DE CONFIRMATION (OPTIONNEL) =====

    /**
     * Affiche un dialog de confirmation pour les actions m√©t√©o
     */
    async function showWeatherDialog() {
        const weatherActive = isWeatherActive();
        const action = weatherActive ? "arr√™ter" : "d√©marrer";
        const icon = weatherActive ? "‚òÄÔ∏è" : "üåßÔ∏è";
        const actionText = weatherActive ? "Arr√™ter la M√©t√©o" : "Activer Pluie + Brouillard";

        return new Promise((resolve) => {
            new Dialog({
                title: "üå¶Ô∏è Contr√¥le M√©t√©orologique",
                content: `
                    <div style="padding: 15px; text-align: center;">
                        <h3 style="margin-bottom: 15px;">${icon} ${actionText}</h3>
                        <p style="margin-bottom: 20px; color: #666;">
                            ${weatherActive
                        ? "Les effets m√©t√©orologiques sont actifs sur cette sc√®ne. Voulez-vous les arr√™ter ?"
                        : "Aucun effet m√©t√©orologique n'est actif. Voulez-vous activer la pluie avec brouillard ?"
                    }
                        </p>
                        ${!weatherActive ? `
                            <div style="margin: 15px 0; padding: 10px; background: #f0f8ff; border-radius: 4px;">
                                <h4 style="margin-top: 0;">Configuration des Effets :</h4>
                                <div style="text-align: left; font-size: 0.9em;">
                                    <p><strong>üåßÔ∏è Pluie :</strong> Densit√© ${WEATHER_CONFIG.rainParticles.options.density * 100}%, Direction ${WEATHER_CONFIG.rainParticles.options.direction}¬∞</p>
                                    <p><strong>üå´Ô∏è Brouillard :</strong> Densit√© ${WEATHER_CONFIG.fogFilter.options.density * 100}%, Vitesse ${WEATHER_CONFIG.fogFilter.options.speed}x</p>
                                </div>
                            </div>
                        ` : ''}
                    </div>
                `,
                buttons: {
                    confirm: {
                        icon: `<i class="fas ${weatherActive ? 'fa-sun' : 'fa-cloud-rain'}"></i>`,
                        label: actionText,
                        callback: () => resolve(true)
                    },
                    cancel: {
                        icon: '<i class="fas fa-times"></i>',
                        label: "Annuler",
                        callback: () => resolve(false)
                    }
                },
                default: "confirm",
                close: () => resolve(false)
            }, {
                width: 450
            }).render(true);
        });
    }

    // ===== EX√âCUTION PRINCIPALE =====

    try {
        // Option 1 : Ex√©cution directe (recommand√© pour usage fr√©quent)
        const success = await toggleWeather();

        // Option 2 : Avec dialog de confirmation (d√©commentez si souhait√©)
        /*
        const confirmed = await showWeatherDialog();
        if (confirmed) {
            const success = await toggleWeather();
        } else {
            ui.notifications.info("‚ùå Action m√©t√©orologique annul√©e.");
        }
        */

        if (success) {
            // Optionnel : d√©clencher des effets sonores
            /*
            if (isWeatherActive()) {
                // Jouer un son de pluie
                AudioHelper.play({src: "sounds/environment/rain-ambient.ogg", volume: 0.3, loop: true});
            }
            */
        }

    } catch (error) {
        console.error("[Weather Rain Toggle] Unexpected error:", error);
        ui.notifications.error("‚ö†Ô∏è Erreur inattendue lors du contr√¥le m√©t√©orologique.");
    }

    // ===== FONCTIONS UTILITAIRES EXPORT√âES =====

    /**
     * Fonctions utilitaires disponibles pour d'autres macros
     */
    globalThis.WeatherRainToggle = {
        isActive: isWeatherActive,
        start: startWeather,
        stop: stopWeather,
        toggle: toggleWeather,
        config: WEATHER_CONFIG,
        showDialog: showWeatherDialog
    };

    console.log("[Weather Rain Toggle] Utility functions exported to globalThis.WeatherRainToggle");

})();
