/**
 * Test Advanced Macros - Syst√®me de Queries
 *
 * Utilitaire de test pour v√©rifier le fonctionnement d'Advanced Macros
 * et de son syst√®me de queries pour l'ex√©cution de macros avec privil√®ges.
 *
 * IMPORTANT: Advanced Macros N'A PAS d'API executeAsGM !
 * Il utilise un syst√®me de queries et de configuration de macros.
 *
 * UTILISATION :
 * 1. S'assurer qu'Advanced Macros est install√© et activ√©
 * 2. Cr√©er une macro de test configur√©e pour s'ex√©cuter en tant que GM
 * 3. Lancer cette macro pour tester le syst√®me de queries
 *
 * TESTS INCLUS :
 * - V√©rification de la disponibilit√© d'Advanced Macros
 * - Test du syst√®me de queries
 * - Cr√©ation dynamique d'une macro de test
 * - Test d'ex√©cution avec privil√®ges GM via user.query
 */

(async () => {
    console.log("[AdvancedMacros Test] Starting test sequence...");

    // ===== FONCTION DE V√âRIFICATION D'ADVANCED MACROS =====
    function checkAdvancedMacrosCapabilities() {
        const advancedMacros = game.modules.get("advanced-macros");

        if (!advancedMacros) {
            return { available: false, reason: "Module non install√©" };
        }

        if (!advancedMacros.active) {
            return { available: false, reason: "Module non activ√©" };
        }

        // V√©rifier les queries disponibles
        const hasExecuteMacroQuery = CONFIG.queries && CONFIG.queries["advanced-macros.executeMacro"];

        return {
            available: true,
            version: advancedMacros.version || "Version inconnue",
            hasQueries: !!hasExecuteMacroQuery,
            userCanQuery: typeof game.user.query === 'function',
            currentUser: {
                name: game.user.name,
                isGM: game.user.isGM,
                id: game.user.id
            },
            activeGM: game.users.activeGM?.name || "Aucun GM actif"
        };
    }

    // ===== V√âRIFICATION INITIALE =====
    const macroCheck = checkAdvancedMacrosCapabilities();

    if (!macroCheck.available) {
        const errorMsg = `‚ùå Advanced Macros non disponible: ${macroCheck.reason}`;
        ui.notifications.error(errorMsg);
        console.error("[AdvancedMacros Test]", errorMsg);
        return;
    }

    // Message d'information initial
    const initialMessage = {
        content: `<div style='border: 2px solid #1976d2; padding: 15px; border-radius: 5px; background: #e3f2fd;'>
                     <h3 style='color: #1976d2; margin: 0 0 10px 0;'>üß™ Test Advanced Macros - D√©but</h3>
                     <p><strong>Module:</strong> Advanced Macros v${macroCheck.version}</p>
                     <p><strong>Testeur:</strong> ${macroCheck.currentUser.name} ${macroCheck.currentUser.isGM ? '(GM)' : '(Joueur)'}</p>
                     <p><strong>GM Actif:</strong> ${macroCheck.activeGM}</p>
                     <p><strong>Syst√®me de queries:</strong> ${macroCheck.hasQueries ? '‚úÖ Disponible' : '‚ùå Non disponible'}</p>
                     <p><strong>API user.query:</strong> ${macroCheck.userCanQuery ? '‚úÖ Disponible' : '‚ùå Non disponible'}</p>
                     <hr style='margin: 10px 0;'>
                     <p style='font-style: italic;'>‚ö†Ô∏è Note: Advanced Macros n'a PAS d'API executeAsGM direct.<br>
                     Il utilise un syst√®me de configuration de macros et de queries.</p>
                  </div>`,
        type: CONST.CHAT_MESSAGE_TYPES.OTHER,
        speaker: { alias: "Advanced Macros Test" }
    };

    await ChatMessage.create(initialMessage);
    ui.notifications.info("üß™ Test Advanced Macros - Analyse en cours...");
    console.log("[AdvancedMacros Test] Advanced Macros check:", macroCheck);

    // ===== TEST 1: CR√âATION D'UNE MACRO DE TEST =====
    console.log("[AdvancedMacros Test] Running Test 1: Creating Test Macro");

    let testMacro = null;
    try {
        // Chercher d'abord si une macro de test existe d√©j√†
        testMacro = game.macros.getName("Test Advanced Macros GM");

        if (!testMacro) {
            // Cr√©er une nouvelle macro de test
            const macroData = {
                name: "Test Advanced Macros GM",
                type: "script",
                command: `
                    const testResult = {
                        success: true,
                        executedBy: game.user.name,
                        isGM: game.user.isGM,
                        timestamp: new Date().toLocaleString(),
                        message: "Macro ex√©cut√©e avec succ√®s"
                    };

                    const resultMessage = {
                        content: "<div style='border: 2px solid #4caf50; padding: 10px; border-radius: 5px; background: #e8f5e8;'>" +
                                 "<h3 style='color: #4caf50; margin: 0;'>‚úÖ Macro Test - Succ√®s</h3>" +
                                 "<p><strong>Ex√©cut√©e par:</strong> " + testResult.executedBy + "</p>" +
                                 "<p><strong>Privil√®ges GM:</strong> " + (testResult.isGM ? "‚úÖ Oui" : "‚ùå Non") + "</p>" +
                                 "<p><strong>Timestamp:</strong> " + testResult.timestamp + "</p>" +
                                 "</div>",
                        type: CONST.CHAT_MESSAGE_TYPES.OTHER,
                        speaker: { alias: "Test Macro GM" }
                    };

                    await ChatMessage.create(resultMessage);
                    return testResult;
                `,
                folder: null,
                sort: 0,
                ownership: {
                    default: CONST.DOCUMENT_OWNERSHIP_LEVELS.LIMITED
                },
                flags: {}
            };

            // Si on est GM, configurer la macro pour s'ex√©cuter en tant que GM
            if (game.user.isGM) {
                macroData.flags["advanced-macros"] = {
                    runForSpecificUser: "GM"
                };
                macroData.ownership.default = CONST.DOCUMENT_OWNERSHIP_LEVELS.LIMITED;
            }

            testMacro = await Macro.create(macroData);

            ui.notifications.success("‚úÖ Macro de test cr√©√©e");
            console.log("[AdvancedMacros Test] Created test macro:", testMacro);
        } else {
            ui.notifications.info("‚ÑπÔ∏è Macro de test trouv√©e (existante)");
            console.log("[AdvancedMacros Test] Found existing test macro:", testMacro);
        }

    } catch (error) {
        const errorMsg = `‚ùå Erreur cr√©ation macro: ${error.message}`;
        ui.notifications.error(errorMsg);
        console.error("[AdvancedMacros Test] Macro creation error:", error);
    }

    // ===== TEST 2: SYST√àME DE QUERIES =====
    console.log("[AdvancedMacros Test] Running Test 2: Query System Test");

    try {
        if (!macroCheck.hasQueries) {
            throw new Error("Syst√®me de queries non disponible");
        }

        if (!macroCheck.userCanQuery) {
            throw new Error("API user.query non disponible");
        }

        // Test direct du syst√®me de queries
        const queryData = {
            macro: testMacro ? testMacro.id : "test-id",
            scope: { testParam: "valeur de test" }
        };

        let queryResult;
        if (game.users.activeGM && !game.users.activeGM.isSelf) {
            // Envoyer query au GM actif
            queryResult = await game.users.activeGM.query("advanced-macros.executeMacro", queryData, { timeout: 10000 });
            ui.notifications.success("‚úÖ Query envoy√©e au GM avec succ√®s");
        } else if (testMacro) {
            // Ex√©cuter directement la macro si on est GM ou pas de GM actif
            queryResult = await testMacro.execute({ testParam: "valeur de test" });
            ui.notifications.success("‚úÖ Macro ex√©cut√©e directement");
        } else {
            throw new Error("Aucune macro de test disponible");
        }

        console.log("[AdvancedMacros Test] Query result:", queryResult);

    } catch (error) {
        const errorMsg = `‚ùå Erreur syst√®me queries: ${error.message}`;
        ui.notifications.error(errorMsg);
        console.error("[AdvancedMacros Test] Query system error:", error);

        // Message d'erreur d√©taill√©
        const errorMessage = {
            content: `<div style='border: 2px solid #f44336; padding: 15px; border-radius: 5px; background: #ffebee;'>
                         <h3 style='color: #f44336; margin: 0 0 10px 0;'>‚ùå Erreur Syst√®me Queries</h3>
                         <p><strong>Erreur:</strong> ${error.message}</p>
                         <p><strong>Cause possible:</strong> Syst√®me de queries non configur√© correctement</p>
                         <hr style='margin: 10px 0;'>
                         <p><strong>Solutions:</strong></p>
                         <ul>
                            <li>V√©rifier qu'un GM est connect√© et actif</li>
                            <li>V√©rifier que les macros sont cr√©√©es par un GM</li>
                            <li>Configurer les permissions appropri√©es</li>
                         </ul>
                      </div>`,
            type: CONST.CHAT_MESSAGE_TYPES.OTHER,
            speaker: { alias: "Advanced Macros Test - Error" }
        };

        await ChatMessage.create(errorMessage);
    }

    // ===== TEST 3: V√âRIFICATION DES MACROS EXISTANTES =====
    console.log("[AdvancedMacros Test] Running Test 3: Existing Macros Check");

    try {
        const allMacros = game.macros.contents;
        const advancedMacrosConfigured = allMacros.filter(macro =>
            macro.getFlag("advanced-macros", "runForSpecificUser")
        );

        const macroDetails = advancedMacrosConfigured.map(macro => ({
            name: macro.name,
            runFor: macro.getFlag("advanced-macros", "runForSpecificUser"),
            canRunAsGM: macro.canRunAsGM,
            author: game.users.get(macro.author?.id)?.name || "Inconnu"
        }));

        const macroListMessage = {
            content: `<div style='border: 2px solid #ff9800; padding: 15px; border-radius: 5px; background: #fff3e0;'>
                         <h3 style='color: #ff9800; margin: 0 0 10px 0;'>üìã Macros Advanced Macros Configur√©es</h3>
                         <p><strong>Total macros:</strong> ${allMacros.length}</p>
                         <p><strong>Macros Advanced Macros:</strong> ${advancedMacrosConfigured.length}</p>
                         ${macroDetails.length > 0 ?
                    `<hr style='margin: 10px 0;'><strong>D√©tails:</strong><ul>` +
                    macroDetails.map(m =>
                        `<li><strong>${m.name}</strong> - ${m.runFor} (Auteur: ${m.author}) ${m.canRunAsGM ? '‚úÖ' : '‚ùå'}</li>`
                    ).join('') +
                    `</ul>`
                    : '<p><em>Aucune macro Advanced Macros configur√©e</em></p>'
                }
                      </div>`,
            type: CONST.CHAT_MESSAGE_TYPES.OTHER,
            speaker: { alias: "Advanced Macros Test - Macros" }
        };

        await ChatMessage.create(macroListMessage);
        ui.notifications.info(`‚ÑπÔ∏è ${advancedMacrosConfigured.length} macros Advanced Macros trouv√©es`);
        console.log("[AdvancedMacros Test] Advanced Macros configured:", macroDetails);

    } catch (error) {
        console.error("[AdvancedMacros Test] Macros check error:", error);
    }

    // ===== R√âSUM√â FINAL =====
    const finalMessage = {
        content: `<div style='border: 3px solid #9c27b0; padding: 20px; border-radius: 10px; background: linear-gradient(135deg, #f3e5f5 0%, #e1bee7 100%);'>
                     <h2 style='color: #9c27b0; margin: 0 0 15px 0; text-align: center;'>üß™ Advanced Macros - R√©sum√© Final</h2>
                     <div style='text-align: center; margin-bottom: 15px;'>
                        <p><strong>Module:</strong> Advanced Macros v${macroCheck.version}</p>
                        <p><strong>Testeur:</strong> ${macroCheck.currentUser.name}</p>
                        <p><strong>Date:</strong> ${new Date().toLocaleString()}</p>
                     </div>
                     <div style='background: rgba(255,255,255,0.7); padding: 15px; border-radius: 5px;'>
                        <h3 style='color: #9c27b0; margin: 0 0 10px 0;'>üìã D√©couvertes importantes:</h3>
                        <p>‚ö†Ô∏è <strong>Pas d'API executeAsGM:</strong> Advanced Macros n'expose pas cette fonction</p>
                        <p>‚úÖ <strong>Syst√®me de queries:</strong> Utilise user.query("advanced-macros.executeMacro")</p>
                        <p>‚öôÔ∏è <strong>Configuration required:</strong> Les macros doivent √™tre configur√©es par un GM</p>
                        <p>üîí <strong>S√©curit√©:</strong> Seules les macros cr√©√©es par GM peuvent s'ex√©cuter avec privil√®ges</p>
                     </div>
                     <div style='text-align: center; margin-top: 15px; padding: 10px; background: rgba(156, 39, 176, 0.1); border-radius: 5px;'>
                        <strong style='color: #9c27b0;'>üìñ Utiliser le syst√®me de macros configur√©es plut√¥t qu'une API directe</strong>
                     </div>
                  </div>`,
        type: CONST.CHAT_MESSAGE_TYPES.OTHER,
        speaker: { alias: "Advanced Macros Test - Final" }
    };

    await ChatMessage.create(finalMessage);
    ui.notifications.success("üéâ Test Advanced Macros termin√© - V√©rifiez le chat pour les d√©tails");
    console.log("[AdvancedMacros Test] All tests completed. No direct executeAsGM API available.");

})();
